// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GroupCode group code
// swagger:model GroupCode

type GroupCode struct {

	// code
	// Required: true
	// Pattern: ^[A-Z0-9]{12}$
	Code *string `json:"code"`

	// group Uid
	// Required: true
	GroupUID *strfmt.UUID `json:"groupUid"`

	// valid until
	// Required: true
	// Read Only: true
	ValidUntil strfmt.DateTime `json:"validUntil"`
}

/* polymorph GroupCode code false */

/* polymorph GroupCode groupUid false */

/* polymorph GroupCode validUntil false */

// Validate validates this group code
func (m *GroupCode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGroupUID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateValidUntil(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GroupCode) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	if err := validate.Pattern("code", "body", string(*m.Code), `^[A-Z0-9]{12}$`); err != nil {
		return err
	}

	return nil
}

func (m *GroupCode) validateGroupUID(formats strfmt.Registry) error {

	if err := validate.Required("groupUid", "body", m.GroupUID); err != nil {
		return err
	}

	if err := validate.FormatOf("groupUid", "body", "uuid", m.GroupUID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GroupCode) validateValidUntil(formats strfmt.Registry) error {

	if err := validate.Required("validUntil", "body", strfmt.DateTime(m.ValidUntil)); err != nil {
		return err
	}

	if err := validate.FormatOf("validUntil", "body", "date-time", m.ValidUntil.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GroupCode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GroupCode) UnmarshalBinary(b []byte) error {
	var res GroupCode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
