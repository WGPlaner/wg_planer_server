// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Bill bill
// swagger:model Bill

type Bill struct {

	// bill items
	// Required: true
	BillItems []string `json:"billItems"`

	// created at
	// Read Only: true
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// created by
	// Required: true
	CreatedBy *string `json:"createdBy"`

	// due date
	DueDate string `json:"dueDate,omitempty"`

	// state
	// Required: true
	State *string `json:"state"`

	// sum
	Sum int64 `json:"sum,omitempty"`

	// updated at
	// Read Only: true
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`
}

/* polymorph Bill billItems false */

/* polymorph Bill createdAt false */

/* polymorph Bill createdBy false */

/* polymorph Bill dueDate false */

/* polymorph Bill state false */

/* polymorph Bill sum false */

/* polymorph Bill updatedAt false */

// Validate validates this bill
func (m *Bill) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBillItems(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCreatedBy(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Bill) validateBillItems(formats strfmt.Registry) error {

	if err := validate.Required("billItems", "body", m.BillItems); err != nil {
		return err
	}

	return nil
}

func (m *Bill) validateCreatedBy(formats strfmt.Registry) error {

	if err := validate.Required("createdBy", "body", m.CreatedBy); err != nil {
		return err
	}

	return nil
}

func (m *Bill) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Bill) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Bill) UnmarshalBinary(b []byte) error {
	var res Bill
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
