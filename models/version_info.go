// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VersionInfo version info
// swagger:model VersionInfo

type VersionInfo struct {

	// android version code
	// Required: true
	// Read Only: true
	AndroidVersionCode int64 `json:"android_version_code"`

	// android version string
	// Required: true
	// Read Only: true
	AndroidVersionString string `json:"android_version_string"`

	// api version code
	// Required: true
	// Read Only: true
	APIVersionCode int64 `json:"api_version_code"`

	// api version string
	// Required: true
	// Read Only: true
	APIVersionString string `json:"api_version_string"`
}

/* polymorph VersionInfo android_version_code false */

/* polymorph VersionInfo android_version_string false */

/* polymorph VersionInfo api_version_code false */

/* polymorph VersionInfo api_version_string false */

// Validate validates this version info
func (m *VersionInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAndroidVersionCode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateAndroidVersionString(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateAPIVersionCode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateAPIVersionString(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VersionInfo) validateAndroidVersionCode(formats strfmt.Registry) error {

	if err := validate.Required("android_version_code", "body", int64(m.AndroidVersionCode)); err != nil {
		return err
	}

	return nil
}

func (m *VersionInfo) validateAndroidVersionString(formats strfmt.Registry) error {

	if err := validate.RequiredString("android_version_string", "body", string(m.AndroidVersionString)); err != nil {
		return err
	}

	return nil
}

func (m *VersionInfo) validateAPIVersionCode(formats strfmt.Registry) error {

	if err := validate.Required("api_version_code", "body", int64(m.APIVersionCode)); err != nil {
		return err
	}

	return nil
}

func (m *VersionInfo) validateAPIVersionString(formats strfmt.Registry) error {

	if err := validate.RequiredString("api_version_string", "body", string(m.APIVersionString)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VersionInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VersionInfo) UnmarshalBinary(b []byte) error {
	var res VersionInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
