// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Group group
// swagger:model Group

type Group struct {

	// admins
	// Read Only: true
	Admins []string `json:"admins"`

	// created at
	// Read Only: true
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// currency
	// Max Length: 4
	Currency string `json:"currency,omitempty"`

	// display name
	// Required: true
	DisplayName *string `json:"displayName"`

	// members
	// Read Only: true
	Members []string `json:"members"`

	// photo Url
	PhotoURL strfmt.URI `json:"photoUrl,omitempty"`

	// uid
	// Read Only: true
	UID strfmt.UUID `json:"uid,omitempty"`

	// updated at
	// Read Only: true
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`
}

/* polymorph Group admins false */

/* polymorph Group createdAt false */

/* polymorph Group currency false */

/* polymorph Group displayName false */

/* polymorph Group members false */

/* polymorph Group photoUrl false */

/* polymorph Group uid false */

/* polymorph Group updatedAt false */

// Validate validates this group
func (m *Group) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdmins(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMembers(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Group) validateAdmins(formats strfmt.Registry) error {

	if swag.IsZero(m.Admins) { // not required
		return nil
	}

	return nil
}

func (m *Group) validateCurrency(formats strfmt.Registry) error {

	if swag.IsZero(m.Currency) { // not required
		return nil
	}

	if err := validate.MaxLength("currency", "body", string(m.Currency), 4); err != nil {
		return err
	}

	return nil
}

func (m *Group) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("displayName", "body", m.DisplayName); err != nil {
		return err
	}

	return nil
}

func (m *Group) validateMembers(formats strfmt.Registry) error {

	if swag.IsZero(m.Members) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Group) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Group) UnmarshalBinary(b []byte) error {
	var res Group
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
