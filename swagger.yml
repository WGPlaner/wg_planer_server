swagger: "2.0"
info:
  description: "This is the API documentation for the android application WGPlaner."
  version: "0.0.1"
  title: "WGPlaner API Documentation"
  contact:
    name: WGPlaner-Team
    email: "wgplaner@ameyering.de"
  license:
    name: "MIT"
    url: "https://github.com/WGPlaner/wg_planer_server/blob/master/LICENSE"
host: "api.wgplaner.ameyering.de"
basePath: "/"

tags:
- name: bill
  description: Bill related endpoints
- name: group
  description: Group related endpoints
- name: user
  description: User related endpoints
- name: shoppinglist
  description: Shopping list related endpoints
- name: info
  description: Information related endpoints

schemes:
  - https
consumes:
  - application/json
produces:
  - application/json

securityDefinitions:
  UserIDAuth:
    description: For accessing user related parts of the API a valid userID must be passed in 'Authorization' header.
    type: apiKey
    name: Authorization
    in: header
  FirebaseIDAuth:
    description: For accessing user related parts of the API a valid userID must be passed in 'Authorization' header.
    type: apiKey
    name: Authorization
    in: header

paths:

  /version:
    get:
      tags:
      - info
      description: Get the version code for the API and android client.
      operationId: getVersion
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/VersionInfo"

  /groups:
    parameters:
      - in: body
        name: body
        description: The group to update (contains uid, displayName, etc)
        required: true
        schema:
          $ref: "#/definitions/Group"
    post:
      tags:
      - group
      description: Create a new group for the authenticated user. The authenticated user
                   will be a member and admin of the new group.
      operationId: createGroup
      security:
        - UserIDAuth: []
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/Group"
        400:
          description: Invalid group data
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: Unauthorized User
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      tags:
      - group
      description: Update the group that is given through the UID in the body.
                   The authenticated user has to be an admin.
      operationId: updateGroup
      security:
        - UserIDAuth: []
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/Group"
        400:
          description: Invalid group data
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: Unauthorized User
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /groups/{groupUID}:
    parameters:
    - name: groupUID
      in: path
      description: The internal ID of the group
      required: true
      type: string
      format: uuid
    get:
      tags:
      - group
      description: Get the group given with the UID in the URL.
      operationId: getGroup
      security:
        - UserIDAuth: []
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/Group"
        400:
          description: Invalid groupUID
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: Group not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /groups/{groupUID}/create-code:
    parameters:
      - name: groupUID
        in: path
        description: The internal ID of the group
        required: true
        type: string
        format: uuid
    get:
      tags:
      - group
      description: Creates and returns a group code. Deletes old codes if they exist.
      operationId: createGroupCode
      security:
        - UserIDAuth: []
      responses:
        200:
          description: Success with GroupCode (code + valid until date)
          schema:
            $ref: "#/definitions/GroupCode"
        400:
          description: Invalid groupUID
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: Unauthroized
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: Group not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /groups/{groupUID}/image:
    parameters:
      - name: groupUID
        in: path
        description: The internal ID of the group
        required: true
        type: string
        format: uuid
    get:
      tags:
      - group
      description: Get the group's profile image. Returns a JPEG with 'application/octet-stream'
                   Content-Type in header. The authenticated user must be a member of the group.
      operationId: getGroupImage
      security:
        - UserIDAuth: []
      produces:
        - application/octet-stream
        - application/json
      responses:
        200:
          description: Success
          schema:
            type: string
            format: binary
            readOnly: true
        400:
          description: Invalid groupUID
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      tags:
      - group
      description: Update the group's profile image. Must be a JPEG with 'application/octet-stream'
                   Content-Type in header. The authenticated user must be a member of the group.
      operationId: updateGroupImage
      security:
      - UserIDAuth: []
      parameters:
      - name: profileImage
        in: formData
        description: The profile image.
        required: true
        type: file
      consumes:
      - multipart/form-data
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/SuccessResponse"
        400:
          description: Invalid groupUID
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /groups/join/{groupCode}:
    get:
      tags:
      - group
      description: The authenticated user joins a group through "groupCode"
      operationId: joinGroupHelp
      produces:
        - text/html
      parameters:
        - name: groupCode
          in: path
          description: Group join code
          required: true
          type: string
      responses:
        200:
          description: Success
          schema:
            type: string
        default:
          description: Error
          schema:
            type: string
    post:
      tags:
      - group
      description: The authenticated user joins a group through "groupCode"
      operationId: joinGroup
      security:
        - UserIDAuth: []
      parameters:
        - name: groupCode
          in: path
          description: Group join code
          required: true
          type: string
          pattern: '^[A-Z0-9]{12}$'
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/Group"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /groups/leave:
    post:
      tags:
      - group
      description: The authenticated user leaves his group
      operationId: leaveGroup
      security:
        - UserIDAuth: []
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/SuccessResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /group/{groupUID}/bills:
    parameters:
    - name: groupUID
      in: path
      description: The internal ID of the group
      required: true
      type: string
      format: uuid
    get:
      tags:
      - bill
      description: Returns the group's bill
      operationId: getBillList
      security:
        - UserIDAuth: []
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/BillList"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /group/{groupUID}/bills/create:
    parameters:
    - name: groupUID
      in: path
      description: The internal ID of the group
      required: true
      type: string
      format: uuid
    post:
      tags:
      - bill
      description: Returns the bill object
      operationId: createBill
      security:
        - UserIDAuth: []
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/Bill"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /users:
    post:
      tags:
      - user
      description: Creates a new user
      operationId: createUser
      security:
        - FirebaseIDAuth: []
      parameters:
      - in: body
        name: body
        description: The name of the user to create
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/User"
        400:
          description: Invalid user data
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      tags:
      - user
      description: Update an existing user
      operationId: updateUser
      security:
        - UserIDAuth: []
      parameters:
      - in: body
        name: body
        description: The users data to update
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/User"
        400:
          description: Invalid user data
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /users/{userID}:
    parameters:
      - name: userID
        in: path
        description: The internal ID of the user
        required: true
        type: string
        pattern: "^[a-zA-Z0-9]{28}$"
    get:
      tags:
      - user
      description: Get user data
      operationId: getUser
      security:
        - FirebaseIDAuth: []
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/User"
        400:
          description: Bad Request
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: Unauthorized User
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: User not found on server
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /users/{userID}/image:
    parameters:
      - name: userID
        in: path
        description: The internal ID of the user
        required: true
        type: string
        pattern: "^[a-zA-Z0-9]{28}$"
    get:
      tags:
      - user
      description: Get the user's profile image
      operationId: getUserImage
      security:
        - UserIDAuth: []
      produces:
        - application/octet-stream
        - application/json
      responses:
        200:
          description: Success
          schema:
            type: string
            format: binary
            readOnly: true
        400:
          description: Invalid userID
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      tags:
        - user
      description: Update the user's profile image
      operationId: updateUserImage
      security:
        - UserIDAuth: []
      parameters:
        - name: userID
          in: path
          description: The internal ID of the user
          required: true
          type: string
          pattern: "^[a-zA-Z0-9]{28}$"
        - name: profileImage
          in: formData
          description: Success
          required: true
          type: file
      consumes:
        - multipart/form-data
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/SuccessResponse"
        400:
          description: Invalid userID
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /shoppinglist/{groupUID}:
    parameters:
    - name: groupUID
      in: path
      description: The internal ID of the group
      required: true
      type: string
      format: uuid
    get:
      tags:
      - shoppinglist
      description: Get all items of the group
      operationId: getListItems
      security:
        - FirebaseIDAuth: []
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/ShoppingList"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      tags:
      - shoppinglist
      description: Creates a new shopping list item
      operationId: createListItem
      security:
        - FirebaseIDAuth: []
      parameters:
      - in: body
        name: body
        description: The data of the item to create.
        required: true
        schema:
          $ref: "#/definitions/ListItem"
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/ListItem"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      tags:
      - shoppinglist
      description: Updates a shopping list item
      operationId: updateListItem
      security:
        - FirebaseIDAuth: []
      parameters:
      - in: body
        name: body
        description: The data of the item to create.
        required: true
        schema:
          $ref: "#/definitions/ListItem"
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/ListItem"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

  /shoppinglist/{groupUID}/item/{itemUid}:
    parameters:
    - name: groupUID
      in: path
      description: The internal ID of the group
      required: true
      type: string
      format: uuid
    - name: itemUid
      in: path
      description: The internal ID of the item
      required: true
      type: string
      format: uuid
    get:
      tags:
      - shoppinglist
      description: Get a specified shopping list item.
      operationId: getListItem
      security:
        - FirebaseIDAuth: []
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/ShoppingList"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

definitions:
  User:
    required:
      - uid
      - displayName
    properties:
      uid:
        type: string
        pattern: "^[a-zA-Z0-9]{28}$"
      displayName:
        type: string
        maxLength: 20
        minLength: 3
      groupUID:
        type: string
        format: uuid
      firebaseInstanceId:
        type: string
        pattern: "^[-_:a-zA-Z0-9]{152}$"
      locale:
        type: string
      photoUrl:
        type: string
        format: uri
      email:
        type: string
        format: email
      createdAt:
        type: string
        format: date-time
        readOnly: true
      updatedAt:
        type: string
        format: date-time
        readOnly: true
  Group:
    required:
      - displayName
    properties:
      uid:
        type: string
        format: uuid
        readOnly: true
      displayName:
        type: string
      currency:
        type: string
        maxLength: 4
      photoUrl:
        type: string
        format: uri
      admins:
        type: array
        items:
          type: string
          pattern: "^[a-zA-Z0-9]{28}$"
        readOnly: true
      members:
        type: array
        items:
          type: string
          pattern: "^[a-zA-Z0-9]{28}$"
        readOnly: true
      createdAt:
        type: string
        format: date-time
        readOnly: true
      updatedAt:
        type: string
        format: date-time
        readOnly: true
  GroupCode:
    required:
      - groupUID
      - code
      - validUntil
    properties:
      groupUID:
        type: string
        format: uuid
        readOnly: true
      code:
        type: string
        pattern: '^[A-Z0-9]{12}$'
        readOnly: true
      validUntil:
        type: string
        format: date-time
        readOnly: true
  ShoppingList:
    required:
    - listItems
    - count
    properties:
      count:
        type: integer
        readOnly: true
      listItems:
        type: array
        readOnly: true
        items:
          $ref: "#/definitions/ListItem"
  ListItem:
    required:
      - title
      - category
      - count
    properties:
      id:
        type: string
        format: uuid
        readOnly: true
      title:
        type: string
        maxLength: 150
      requestedFor:
        type: array
        items:
          type: string
      groupUID:
        type: string
        format: uuid
        readOnly: true
      count:
        type: integer
      requestedBy:
        type: string
        readOnly: true
      price:
        type: integer
      category:
        type: string
      billUid:
        type: string
        format: uuid
        readOnly: true
      boughtAt:
        type: string
        format: date-time
        readOnly: true
      createdAt:
        type: string
        format: date-time
        readOnly: true
      updatedAt:
        type: string
        format: date-time
        readOnly: true
  Bill:
    required:
      - billItems
      - state
      - createdBy
    properties:
      uid:
        type: string
        format: uuid
      group_uid:
        type: string
        format: uuid
        readOnly: true
      state:
        type: string
      sum:
        type: integer
      billItems:
        type: array
        items:
          type: string
      createdBy:
        type: string
      dueDate:
        type: string
      createdAt:
        type: string
        format: date-time
        readOnly: true
      updatedAt:
        type: string
        format: date-time
        readOnly: true
  BillList:
    required:
    - count
    - bills
    properties:
      count:
        type: integer
        readOnly: true
      bills:
        type: array
        readOnly: true
        items:
          $ref: "#/definitions/Bill"
  VersionInfo:
    type: object
    required:
      - api_version_string
      - api_version_code
      - android_version_string
      - android_version_code
    properties:
      api_version_string:
        type: string
        readOnly: true
        example: "v0.1.0"
      api_version_code:
        type: integer
        readOnly: true
        example: 1
      android_version_string:
        type: string
        readOnly: true
        example: "v0.1.0"
      android_version_code:
        type: integer
        readOnly: true
        example: 1
  ErrorResponse:
    required:
      - status
      - message
    properties:
      status:
        type: integer
      message:
        type: string
  SuccessResponse:
    required:
      - status
      - message
    properties:
      status:
        type: integer
      message:
        type: string
