swagger: "2.0"
info:
  description: "This is the API documentation for the android application WGPlaner."
  version: "0.0.1"
  title: "WGPlaner API Documentation"
  contact:
    name: WGPlaner-Team
    email: "wgplaner@ameyering.de"
  license:
    name: "MIT"
    url: "https://github.com/WGPlaner/wg_planer_server/blob/master/LICENSE"
host: "api.wgplaner.ameyering.de"
basePath: "/v0.1"

tags:
- name: group
  description: Group related endpoints
- name: user
  description: User related endpoints

schemes:
  - https
consumes:
  - application/json
produces:
  - application/json

securityDefinitions:
  UserIDAuth:
    description: For accessing user related parts of the API a valid userID must be passed in 'Authorization' header.
    type: apiKey
    name: Authorization
    in: header
  FirebaseIDAuth:
    description: For accessing user related parts of the API a valid userID must be passed in 'Authorization' header.
    type: apiKey
    name: Authorization
    in: header

paths:
  /groups/{groupId}:
    get:
      tags:
      - group
      description: Returns the group object
      operationId: getGroup
      security:
        - UserIDAuth: []
      parameters:
        - name: groupId
          in: path
          description: The internal ID of the group
          required: true
          type: string
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/Group"
        400:
          description: Invalid groupId
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: Group not found
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /groups:
    post:
      tags:
      - group
      description: Creates a new group
      operationId: createGroup
      security:
        - UserIDAuth: []
      parameters:
        - in: body
          name: body
          description: The name of the group to create
          required: true
          schema:
            $ref: "#/definitions/Group"
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/Group"
        400:
          description: Invalid group data
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: Unauthorized User
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /users/{userId}:
    get:
      tags:
      - user
      description: Returns the user object
      operationId: getUser
      security:
        - FirebaseIDAuth: []
      parameters:
        - name: userId
          in: path
          description: The internal ID of the user
          required: true
          type: string
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/User"
        400:
          description: Invalid userId
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: Unauthorized User
          schema:
            $ref: "#/definitions/ErrorResponse"
        404:
          description: User not found on server
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /users:
    post:
      tags:
      - user
      description: Creates a new user
      operationId: createUser
      security:
        - FirebaseIDAuth: []
      parameters:
      - in: body
        name: body
        description: The name of the user to create
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/User"
        400:
          description: Invalid user data
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      tags:
      - user
      description: Update an existing user
      operationId: updateUser
      security:
        - UserIDAuth: []
      parameters:
      - in: body
        name: body
        description: The users data to update
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/User"
        400:
          description: Invalid user data
          schema:
            $ref: "#/definitions/ErrorResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /swagger:
    x-swagger-pipe: swagger_raw

definitions:
  User:
    required:
      - uid
      - displayName
    properties:
      uid:
        type: string
      displayName:
        type: string
        maxLength: 20
        minLength: 3
      groupUid:
        type: string
        format: uuid
      locale:
        type: string
      photoUrl:
        type: string
        format: uri
      email:
        type: string
        format: email
      createdAt:
        type: string
        format: date-time
        readOnly: true
      updatedAt:
        type: string
        format: date-time
        readOnly: true
  Group:
    required:
      - displayName
    properties:
      uid:
        type: string
        format: uuid
      displayName:
        type: string
      currency:
        type: string
      photoUrl:
        type: string
        format: uri
      admins:
        type: array
        items:
          type: string
      createdAt:
        type: string
        format: date-time
        readOnly: true
      updatedAt:
        type: string
        format: date-time
        readOnly: true
  ListItem:
    required:
      - title
      - category
    properties:
      title:
        type: string
      requestedFor:
        type: array
        items:
          type: string
      requestedBy:
        type: string
      price:
        type: integer
      category:
        type: string
      boughAt:
        type: string
      createdAt:
        type: string
        format: date-time
        readOnly: true
      updatedAt:
        type: string
        format: date-time
        readOnly: true
  Bill:
    required:
      - billItems
      - state
      - createdBy
    properties:
      state:
        type: string
      sum:
        type: integer
      billItems:
        type: array
        items:
          type: string
      createdBy:
        type: string
      dueDate:
        type: string
      createdAt:
        type: string
        format: date-time
        readOnly: true
      updatedAt:
        type: string
        format: date-time
        readOnly: true
  ErrorResponse:
    required:
      - status
      - message
    properties:
      status:
        type: integer
      message:
        type: string
